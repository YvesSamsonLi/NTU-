
#include "servo.h"
#include "cmsis_os.h"

uint8_t cur_direction; // 0 as left, 1 as straight, 2 as right
TIM_HandleTypeDef* htim1Ptr;

void turnLeft(){
	htim1Ptr->Instance->CCR4=962;
	cur_direction = LEFT;
	osDelay(700);
}
void turnRight(){
	htim1Ptr->Instance->CCR4=2200;
	cur_direction = RIGHT;
	osDelay(700);
}

void backward_Servo(){
	htim1Ptr->Instance->CCR4=900;
	cur_direction = LEFT;
			osDelay(700);
	htim1Ptr->Instance->CCR4=1530;
		cur_direction = STRAIGHT;
		osDelay(700);
}

void servo_Straight(){
	htim1Ptr->Instance->CCR4=2200;
	cur_direction = RIGHT;
			osDelay(700);
	htim1Ptr->Instance->CCR4=1485;
		cur_direction = STRAIGHT;
		osDelay(700);
}


void turnStraight(){
	if(cur_direction == LEFT){
		//htim1Ptr->Instance->CCR4=1548; // software lab 1 floor
		htim1Ptr->Instance->CCR4=1510; // arc floor
		osDelay(700);
	}else if(cur_direction == RIGHT){
		//htim1Ptr->Instance->CCR4=1457; // software lab 1 floor
		htim1Ptr->Instance->CCR4=1500; // arc floor
		osDelay(700);
	}else{
		return;
	}
	cur_direction = STRAIGHT;
}
void turnServo(uint8_t target){
	if(target == LEFT){
		turnLeft();
	}else if(target == STRAIGHT){
		turnStraight();
	}else{
		turnRight();
	}
}
uint8_t getServoDir() {
	return cur_direction;
}
void servoInit(TIM_HandleTypeDef* htim) {
    // Store the timer handle pointer
    htim1Ptr = htim;

    // Start PWM output for the servo using the specified timer
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);

    // Set initial servo position
    cur_direction = 1; // Initialize current direction variable

    // Move the servo to the initial position gradually
    htim1Ptr->Instance->CCR4 = 2200; // Set pulse width for initial position (software lab 1 floor)
    HAL_Delay(700); // Wait for servo to reach position

    // Move the servo to a different position for calibration
    htim1Ptr->Instance->CCR4 = 1000; // Set pulse width for calibration position (software lab 1 floor)
    HAL_Delay(700); // Wait for servo to reach position

    // Move the servo to a final position for calibration
    htim1Ptr->Instance->CCR4 = 1510; // Set pulse width for final calibration position (arc floor)
    HAL_Delay(700); // Wait for servo to reach position
}


