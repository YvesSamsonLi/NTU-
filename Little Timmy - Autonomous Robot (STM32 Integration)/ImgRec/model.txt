# Code is heavily referenced from https://github.com/pyesonekyaw/CZ3004-SC2079-MDP-ImageRecognition
import os
import shutil
import time
import glob
import torch
from PIL import Image

# Function to load model cretaed from yolov5
def load_model():
    # For task 1
    #model = torch.hub.load('./', 'custom', path='Weights/task1.pt', source='local')
    # For task 2
    model = torch.hub.load('./', 'custom', path='Weights/task2.pt', source='local')
    model = model.to(torch.float)
    return model

# Function to predict the arrows and bullseye for task 2. Created a seperated one from task 1 for faster prediction. Will return image id
def predict_image_task_2(image, model):
    img = Image.open(os.path.join('uploads', image))
    results = model(img)
    results.save('runs')
    df_results = results.pandas().xyxy[0]
    df_results['bboxHt'] = df_results['ymax'] - df_results['ymin']
    df_results['bboxWt'] = df_results['xmax'] - df_results['xmin']
    df_results['bboxArea'] = df_results['bboxHt'] * df_results['bboxWt']
    df_results = df_results.sort_values('bboxArea', ascending=False)
    pred_list = df_results 
    pred = 'NA'
    if pred_list.size != 0:
        for _, row in pred_list.iterrows():
            if row['name'] != 'Bullseye' and row['confidence'] > 0.5:
                pred = row 
                break
            
    name_to_id = {
        "NA": 'NA',
        "Bullseye": 99,
        "Right": 38,
        "Left": 39,
    }
    if not isinstance(pred,str):
        image_id = str(name_to_id[pred['name']])
    else:
        image_id = 'NA'
    return image_id

# function to stitch all predicted images into one image
def stitch_image():
    imgFolder = 'runs'
    stitchedPath = os.path.join(imgFolder, 'stitch', f'stitched-{int(time.time())}.jpeg')
    imgPaths = glob.glob(os.path.join(imgFolder+"/detect/*/", "*.jpg"))
    stitchedImg = combine_images(space=15, imgPaths=imgPaths)
    stitchedImg.save(stitchedPath)
    for img in imgPaths:
        shutil.move(img, os.path.join(
            "runs", "originals", os.path.basename(img)))
    return stitchedImg

# function to stitch the images in a grid format
def combine_images(space, imgPaths):
    images = [Image.open(x) for x in imgPaths]
    width, height = zip(*(i.size for i in images))
    if len(images) <= 4:
        columns = 2
    else:
        columns = 3
    rows = len(images) // columns
    if len(images) % columns:
        rows += 1
    width_max = max(width)
    height_max = max(height)
    background_width = width_max*columns + (space*columns)-space
    background_height = height_max*rows + (space*rows)-space
    background = Image.new('RGB', (background_width, background_height), (255, 255, 255, 255))
    x = 0
    y = 0
    for i, image in enumerate(images):
        x_offset = int((width_max-image.width)/2)
        y_offset = int((height_max-image.height)/2)
        background.paste(image, (x+x_offset, y+y_offset))
        x += width_max + space
        if (i+1) % columns == 0:
            y += height_max + space
            x = 0
    return background

# function to predict image for task 1. Will return image id
def predict_image(image, model):
    try:
        img = Image.open(os.path.join('uploads', image))
        results = model(img)
        results.save('runs')
        df_results = results.pandas().xyxy[0]
        df_results['bboxHt'] = df_results['ymax'] - df_results['ymin']
        df_results['bboxWt'] = df_results['xmax'] - df_results['xmin']
        df_results['bboxArea'] = df_results['bboxHt'] * df_results['bboxWt']
        df_results = df_results.sort_values('bboxArea', ascending=False)
        pred_list = df_results
        pred = 'NA'

        if len(pred_list) == 1:
            if pred_list.iloc[0]['name'] != 'Bullseye':
                pred = pred_list.iloc[0]
        # Filter out other detected boxes from the main one
        elif len(pred_list) > 1:
            pred_shortlist = []
            current_area = pred_list.iloc[0]['bboxArea']
            for _, row in pred_list.iterrows():
                if row['name'] != 'Bullseye' and row['confidence'] > 0.6 and ((current_area * 0.8 <= row['bboxArea']) or (row['name'] == 'One' and current_area * 0.6 <= row['bboxArea'])):
                    pred_shortlist.append(row)
                    current_area = row['bboxArea']
                    
            if len(pred_shortlist) == 1:
                pred = pred_shortlist[0]
            else:
                pred_shortlist.sort(key=lambda x: x['xmin'])
                if isinstance(pred,str):
                    pred_shortlist.sort(key=lambda x: x['bboxArea']) 
                    pred = pred_shortlist[-1]
        
        name_to_id = {
            "NA": 'NA',
            "Bullseye": 99,
            "1": 11,
            "2": 12,
            "3": 13,
            "4": 14,
            "5": 15,
            "6": 16,
            "7": 17,
            "8": 18,
            "9": 19,
            "A": 20,
            "B": 21,
            "C": 22,
            "D": 23,
            "E": 24,
            "F": 25,
            "G": 26,
            "H": 27,
            "S": 28,
            "T": 29,
            "U": 30,
            "V": 31,
            "W": 32,
            "X": 33,
            "Y": 34,
            "Z": 35,
            "Up": 36,
            "Down": 37,
            "Right": 38,
            "Left": 39,
            "Stop": 40
        }
        if not isinstance(pred,str):
            image_id = str(name_to_id[pred['name']])
        else:
            image_id = 'NA'
        print(f"Final result: {image_id}")
        return image_id
    except Exception as error:
        print("An error has occurred!")
        print("Error:", error)
        print(f"Final result: NA")
        return 'NA'
        
        