#ifndef INC_COMM_H_
#define INC_COMM_H_

#include "stm32f4xx_hal.h"

#define INST_TYPE_GOSTRAIGHT 0
#define INST_TYPE_TURN 1
#define INST_TYPE_UNDEFINED 2
#define CPLTERR_TYPE_CPLT 0
#define CPLTERR_TYPE_ERR 1
#define CPLTERR_TYPE_UNDEFINED 2

#define UART_ACK_MAX_DELAY 5000
#define UART_PACKET_SIZE 1

/* Struct for instructions (Received) */
typedef struct {
	uint8_t id;
	uint8_t type;
	int16_t val;
} Instruction;

/*
 * Struct for Complete / Error (Transmit)
 * New instance init only by newCpltErr
*/
typedef struct {
	uint8_t id;
	uint8_t type;
	int16_t pos_x;
	int16_t pos_y;
	uint8_t finished;		// Only assigned to by executeInstruction()
} CompleteError;

void comm_init(UART_HandleTypeDef* uart, Instruction* curInstObjRef, CompleteError* cpltErrObjRef);
HAL_StatusTypeDef uart_send();
HAL_StatusTypeDef uart_send_cam(uint8_t obstacle_id);
HAL_StatusTypeDef uart_receive(const uint8_t* uartbuf);
uint8_t uart_receive_cam(const uint8_t* buf);
uint8_t getCurInstId();
uint8_t newCpltErr(uint8_t id);

#endif /* INC_COMM_H_ */
