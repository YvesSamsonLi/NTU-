
#include "motors.h"
#include "main.h"
#include "servo.h"
#include "oled.h"
#include <math.h>
#include <stdlib.h>

MotorData* motorA;
MotorData* motorB;
MotorPIDData* motorAPID;
MotorPIDData* motorBPID;
MotorServoStatus* backup;
float* ori;
TIM_HandleTypeDef* htim8Ptr;	// Pointer of the timer for pwm generation (by default should pass &htim8)
TIM_HandleTypeDef* htim2Ptr;	// Pointer of the timer for motor A encoding (by default should pass &htim2)
TIM_HandleTypeDef* htim3Ptr;	// Pointer of the timer for motor B encoding (by default should pass &htim3)
osSemaphoreId_t* ori_semaphoreHandlePtr;


/* Private function prototypes */
void backup_reset();

/* All functions */

void mtr_init(TIM_HandleTypeDef* pwm_htimPtr, TIM_HandleTypeDef* encodeA_htimPtr, TIM_HandleTypeDef* encodeB_htimPtr,
		MotorData* mtrA, MotorData* mtrB, MotorPIDData* mtrAPID, MotorPIDData* mtrBPID, MotorServoStatus* backupObj,
		float* orientation, osSemaphoreId_t* oriSemHandlePtr) {

	motorA = mtrA;
	motorB = mtrB;
	motorA->suspend = 0;
	motorA->suspend = 0;

	motorAPID = mtrAPID;
	motorBPID = mtrBPID;

	backup = backupObj;
	backup_reset();

	ori = orientation;
	ori_semaphoreHandlePtr = oriSemHandlePtr;

	htim8Ptr = pwm_htimPtr;
	htim2Ptr = encodeA_htimPtr;
	htim3Ptr = encodeB_htimPtr;
	HAL_TIM_PWM_Start(htim8Ptr, PWMA_TIM_CH);
	HAL_TIM_PWM_Start(htim8Ptr, PWMB_TIM_CH);

	HAL_TIM_Encoder_Start_IT(htim2Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2
	HAL_TIM_Encoder_Start_IT(htim3Ptr, TIM_CHANNEL_ALL);	// Note that we only use Channel 1 and 2

	mtrA_init(0, 0, 0, 0, 1);
	mtrB_init(0, 0, 0, 0, 1);
}

void backup_reset() {
	backup->servoDir = STRAIGHT;
	backup->mtrADir = DIR_FWD;
	backup->mtrAPWM = 0;
	backup->mtrBDir = DIR_FWD;
	backup->mtrBPWM = 0;
}

void mtrA_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
    // Reset the timer counter if requested
    if (reset_timer)
        __HAL_TIM_SET_COUNTER(htim2Ptr, 0);

    // Initialize motor A variables
    motorA->dir = DIR_FWD;
    motorA->pwmVal = 0;

    // Initialize PID controller variables for motor A
    motorAPID->count = -(int16_t)__HAL_TIM_GET_COUNTER(htim2Ptr); // Counter (signed value)
    motorAPID->target = target;
    motorAPID->error = motorAPID->target - motorAPID->count;
    motorAPID->error_area = 0;     // area under error - to calculate I for PI implementation
    motorAPID->error_old = 0;      // to calculate D for PID control
    motorAPID->millisOld = HAL_GetTick(); // to calculate I and D for PID control
    
	// Assign PID control coefficients
    motorAPID->Kp = Kp; // Proportional term coefficient
    motorAPID->Kd = Kd; // Derivative term coefficient
    motorAPID->Ki = Ki; // Integral term coefficient
}

void mtrB_init(int16_t target, int16_t Kp, float Kd, float Ki, uint8_t reset_timer) {
    // Reset the timer counter if requested
    if (reset_timer)
        __HAL_TIM_SET_COUNTER(htim3Ptr, 0);

    // Initialize motor B variables
    motorB->dir = DIR_FWD;
    motorB->pwmVal = 0;

    // Initialize PID controller variables for motor B
    motorBPID->count = (int16_t)__HAL_TIM_GET_COUNTER(htim3Ptr); // Counter (signed value)
    motorBPID->target = target;
    motorBPID->error = motorBPID->target - motorBPID->count;
    motorBPID->error_area = 0;     // area under error - to calculate I for PI implementation
    motorBPID->error_old = 0;      // to calculate D for PID control
    motorBPID->millisOld = HAL_GetTick(); // to calculate I and D for PID control
    // Assign PID control coefficients
    motorAPID->Kp = Kp; // Proportional term coefficient
    motorAPID->Kd = Kd; // Derivative term coefficient
    motorAPID->Ki = Ki; // Integral term coefficient
}


void mtrA_mov(uint8_t direction, uint16_t speed) {
    // Backward
    if (direction == DIR_BCK) {
        // Set motor A direction pins for backward motion
        HAL_GPIO_WritePin(MOTOR_AIN1_Port, MOTOR_AIN1_Pin, GPIO_PIN_RESET); // Clear AIN1 pin
        HAL_GPIO_WritePin(MOTOR_AIN2_Port, MOTOR_AIN2_Pin, GPIO_PIN_SET); // Set AIN2 pin
    }
    // Forward
    else {
        // Set motor A direction pins for forward motion
       HAL_GPIO_WritePin(MOTOR_AIN1_Port, MOTOR_AIN1_Pin, GPIO_PIN_SET); // Set AIN1 pin
       HAL_GPIO_WritePin(MOTOR_AIN2_Port, MOTOR_AIN2_Pin, GPIO_PIN_RESET); // Clear AIN2 pin
    }

    // Limit speed to maximum allowed value
    if (speed > MAX_SPEED)
        speed = MAX_SPEED;

    // Set motor A speed using PWM
    __HAL_TIM_SET_COMPARE(htim8Ptr, PWMA_TIM_CH, speed);
}


void mtrB_mov(uint8_t direction, uint16_t speed) {
    // Backward
    if (direction == DIR_BCK) {
        // Set motor B direction pins for backward motion
        HAL_GPIO_WritePin(MOTOR_BIN1_Port, MOTOR_BIN1_Pin, GPIO_PIN_RESET); // Clear BIN1 pin
        HAL_GPIO_WritePin(MOTOR_BIN2_Port, MOTOR_BIN2_Pin, GPIO_PIN_SET); // Set BIN2 pin
    }
    // Forward
    else {
        // Set motor B direction pins for forward motion
        HAL_GPIO_WritePin(MOTOR_BIN1_Port, MOTOR_BIN1_Pin, GPIO_PIN_SET); // Set BIN1 pin
        HAL_GPIO_WritePin(MOTOR_BIN2_Port, MOTOR_BIN2_Pin, GPIO_PIN_RESET); // Clear BIN2 pin
    }

    // Limit speed to maximum allowed value
    if (speed > MAX_SPEED)
        speed = MAX_SPEED;

    // Set motor B speed using PWM
    __HAL_TIM_SET_COMPARE(htim8Ptr, PWMB_TIM_CH, speed);
}


/* Set params and stop both motors */
void mtr_stop() {
	motorA->dir = DIR_FWD;
	motorA->pwmVal = 0;
	motorB->dir = DIR_FWD;
	motorB->pwmVal = 0;
	mtrA_mov(DIR_FWD, 0);
	mtrB_mov(DIR_FWD, 0);
	turnServo(STRAIGHT);
	osDelay(100);
}

void mtr_mov(MotorData* motor) {
    if (motor->suspend > 0) {
        mtr_stop();
        mtr_continue();
        return;
    }

    switch (motor) {
        case motorA:
            mtrA_mov(motor->dir, motor->pwmVal);
            break;
        case motorB:
            mtrB_mov(motor->dir, motor->pwmVal);
            break;
        default:
            break;
    }
}


void mtr_SetParamAndMove(MotorData* motor, uint8_t param_dir, uint32_t param_pwmVal) {
	motor->dir = param_dir;
	motor->pwmVal = param_pwmVal;
	mtr_mov(motor);
}

void mtr_suspend(uint8_t mode) {
    // Check if mode is valid (0 to 3)
    if (mode > 3) return;

    // Check if motors are already suspended or being resolved
    if ((motorA->suspend != SUS_OFF) || (motorB->suspend != SUS_OFF)) return;

    // Turn off LED indicating suspension status
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);

    // Set suspension mode for both motors
    motorA->suspend = mode;
    motorB->suspend = mode;

    // Backup current motor and servo states if suspending for backward or stop mode
    if ((mode == SUS_BACK) || (mode == SUS_STOP)) {
        // Backup current servo direction
        backup->servoDir = getServoDir();

        // Backup motor A direction and PWM value
        backup->mtrADir = motorA->dir;
        backup->mtrAPWM = motorA->pwmVal;

        // Backup motor B direction and PWM value
        backup->mtrBDir = motorB->dir;
        backup->mtrBPWM = motorB->pwmVal;
    }

    // Stop both motors and reset servo
    mtr_stop();
}

void mtr_suspend(uint8_t mode) {
    // Check if mode is valid (0 to 3)
    if (mode > 3) return;

    // Check if motors are already suspended or being resolved
    if ((motorA->suspend != SUS_OFF) || (motorB->suspend != SUS_OFF)) return;

    // Turn off LED indicating suspension status
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);

    // Set suspension mode for both motors
    motorA->suspend = mode;
    motorB->suspend = mode;

    // Backup current motor and servo states if suspending for backward or stop mode
    if ((mode == SUS_BACK) || (mode == SUS_STOP)) {
        // Backup current servo direction
        backup->servoDir = getServoDir();

        // Backup motor A direction and PWM value
        backup->mtrADir = motorA->dir;
        backup->mtrAPWM = motorA->pwmVal;

        // Backup motor B direction and PWM value
        backup->mtrBDir = motorB->dir;
        backup->mtrBPWM = motorB->pwmVal;
    }

    // Stop both motors and reset servo
    mtr_stop();
}


/*
 * Restore movement, is called in mtr_mov() if the suspend status is on
 */
void mtr_continue() {
    // Check if motor A is not suspended
    if (!motorA->suspend)
        return; // Exit the function if not suspended or likely an error

    // If motor A is suspended due to backward movement or stopping PID
    if ((motorA->suspend == SUS_BACK) || (motorA->suspend == SUS_STOPPID)) {
        // Perform special action to handle backward movement suspension
        mtr_SOSBack();
        // Optional: Reset an LED pin (commented out in the original code)
        //HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
    }

    // If motor A is suspended due to stopping PID (but not backward movement)
    if (motorA->suspend == SUS_STOPPID) {
        // Stop PID operation without restoring movement
        stopPID();
    }
    else {
        // Restore movement, in case of suspension due to backward movement
        // Restore servo direction, motor A direction, and PWM value from backup
        turnServo(backup->servoDir);
        motorA->dir = backup->mtrADir;
        motorA->pwmVal = backup->mtrAPWM;
        motorB->dir = backup->mtrBDir;
        motorB->pwmVal = backup->mtrBPWM;
        // Move motor A and motor B with the restored direction and PWM values
        mtrA_mov(motorA->dir, motorA->pwmVal);
        mtrB_mov(motorB->dir, motorB->pwmVal);
    }

    // Reset backup variables
    backup_reset();
    // Clear suspension flags for both motor A and motor B
    motorA->suspend = 0;
    motorB->suspend = 0;
    // Set an LED pin to indicate completion (assumed to be connected to GPIOE, LED3_Pin)
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_SET);
}


/* Used in emergency cases when car is too close to obstacles only */
float mtr_SOSBack() {
	mtrA_mov(DIR_BCK, 1800);
	mtrB_mov(DIR_BCK, 1800);
	osDelay(500);
	mtr_stop();
	return SOSBACK_DIST_CNT / CNT_PER_CM;
}

void mtr_mov_cnt(int target_A, int target_B) {

	mtrA_init((int16_t)target_A, 1.3, 0.05, 0.0002, 1);
	mtrB_init((int16_t)target_B, 1.1, 0.05, 0.0002, 1); //lower ki since right wheel stronger 
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
		PID_Control(motorA, motorAPID);
		PID_Control(motorB, motorBPID);
		mtr_mov(motorA);
		mtr_mov(motorB);
	}
	mtr_stop();
}

void mtr_mov_cnt_line(int target_A, int target_B) {

	mtrA_init((int16_t)target_A, 1.2, 0.05, 0.0001, 1); //ki was 0.0002, kp 1.5
	mtrB_init((int16_t)target_B, 1.8, 0.05, 0.0001, 1); //ki was 0.0002, kp 0.9
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
		PID_Control(motorA, motorAPID);
		PID_Control(motorB, motorBPID);
        mtr_mov(motorA);
        mtr_mov(motorB);
	}
	mtr_stop();
	osDelay(700);
	mtrA_init((int16_t)target_A, 0.3, 0, 0.0001, 0);//ki was 0.0002
	mtrB_init((int16_t)target_B, 0.3, 0, 0.0001, 0);//ki was 0.0002
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
		PID_Control(motorA, motorAPID);
		PID_Control(motorB, motorBPID);
		mtr_mov(motorA);
		mtr_mov(motorB);
	}
	mtr_stop();
	osDelay(500);
	mtrA_init((int16_t)target_A, 0.1, 0, 0.0001, 0);//ki was 0.0002
	mtrB_init((int16_t)target_B, 0.1, 0, 0.0001, 0);//ki was 0.0002
	while ((abs(motorAPID->error) > MAX_PID_ERR) || (abs(motorBPID->error) > MAX_PID_ERR)) {
		PID_Control(motorA, motorAPID);
		PID_Control(motorB, motorBPID);
		mtr_mov(motorA);
		mtr_mov(motorB);
	}
	mtr_stop();
}


void mtr_mov_cm(float cm_A, float cm_B) {

	if(cm_A >=0 && cm_B >= 0){
	servo_Straight();
	mtr_mov_cnt((int)(cm_A * CNT_PER_CM), (int)(cm_B * CNT_PER_CM));
	}
	else{
		backward_Servo();
		mtr_mov_cnt((int)(cm_A * CNT_PER_CM), (int)(cm_B * CNT_PER_CM));
	}
}

void PID_Control(MotorData* motor, MotorPIDData* motorPID) {
    // Control Loop
    // Check if the absolute error is greater than a threshold (MAX_PID_ERR)
    if (abs(motorPID->error) > MAX_PID_ERR) { // If error is significant

        // Calculate current error
        motorPID->error = motorPID->target - motorPID->count;

        // Determine motor direction based on error sign
        if (motorPID->error > 0)
            motor->dir = DIR_FWD;   // Forward
        else
            motor->dir = DIR_BCK;   // Backward

        // Calculate time elapsed since the last control update
        int32_t millisNow = HAL_GetTick();
        int32_t dt = (millisNow - motorPID->millisOld); // Time elapsed in milliseconds
        motorPID->millisOld = millisNow; // Store the current time for the next round

        // Calculate the integral term (area under error) for Ki
        motorPID->error_area = motorPID->error_area + motorPID->error * dt;

        // Calculate the rate of change of error for Kd
        int32_t error_change = motorPID->error - motorPID->error_old; // Change in error
        motorPID->error_old = motorPID->error; // Store the error for the next round
        float error_rate = (float)error_change / dt;

        // Calculate PWM value using PID control formula
        motor->pwmVal = abs((int32_t)(motorPID->error * motorPID->Kp + motorPID->error_area * motorPID->Ki + error_rate * motorPID->Kd)) / 2;

        // Add a delay to prevent rapid oscillations
        osDelay(10);

        // Limit PWM value within the allowed range
        if (motor->pwmVal > MAX_SPEED)
            motor->pwmVal = MAX_SPEED;
        if (motor->pwmVal < MIN_SPEED)
            motor->pwmVal = MIN_SPEED;
    } else {
        // If error is within the threshold, stop the motor
        motor->dir = DIR_FWD;
        motor->pwmVal = 0;
    }
}


void stopPID() {
    // Reset error to zero for both motor A and motor B PID controllers
    motorAPID->error = 0;
    motorBPID->error = 0;

    // Set PID targets to the current count values for both motors
    motorAPID->target = motorAPID->count;
    motorBPID->target = motorBPID->count;

    // Stop both motors
    mtr_stop();

    // Clear backup variables
    // Set motor directions to forward and PWM values to zero
    backup->mtrADir = DIR_FWD;
    backup->mtrBDir = DIR_FWD;
    backup->mtrAPWM = 0;
    backup->mtrBPWM = 0;
    // Set servo direction to straight
    backup->servoDir = STRAIGHT;
}


void carTurn(uint8_t mtr_dir, float turning_angle) {
    // Check validity of parameters
    if ((mtr_dir < 1) || (mtr_dir > 2))
        return;

    // Calculate target orientation
    float target_ori = (*ori) + turning_angle;
    while (target_ori >= 360) target_ori -= 360;
    while (target_ori < 0) target_ori += 360;

    // Adjustments for near 0 degree target orientation
    uint8_t near_0 = 0;
    float bound_lo, bound_hi;
    if ((target_ori < MAX_ORI_ERR) || (target_ori > 360 - MAX_ORI_ERR)) {
        near_0 = 1;
        if (target_ori > 350) {
            bound_lo = target_ori - MAX_ORI_ERR;
            bound_hi = target_ori + MAX_ORI_ERR - 360;
        }
        else {
            bound_lo = target_ori - MAX_ORI_ERR + 360;
            bound_hi = target_ori + MAX_ORI_ERR;
        }
    }

    // Set servo direction based on turning angle
    ServoDirection servoDir;
    if (turning_angle >= 0 && turning_angle <= 180)
        servoDir = LEFT;
    else
        servoDir = RIGHT;
    turnServo(servoDir);
    osDelay(200);

    // Determine motor speeds based on direction
    int mtrSpeedA, mtrSpeedB;
    if (mtr_dir == 1) {
        mtrSpeedA = 3800;
        mtrSpeedB = 3800;
    } else {
        mtrSpeedA = 4000;
        mtrSpeedB = 4000;
    }

    // Set motor directions and speeds
    mtr_SetParamAndMove(motorA, DIR_FWD, mtrSpeedA);
    mtr_SetParamAndMove(motorB, DIR_FWD, mtrSpeedB);

    // Poll orientation and break when target reached
    while (1) {
        if (!near_0) {
            if (abs((*ori) - target_ori) < MAX_ORI_ERR)
                break;
        } else {
            if (((*ori) > bound_lo) || ((*ori) < bound_hi))
                break;
        }
        osDelay(2);
    }

    // Stop motors and reset servo direction
    mtr_stop();
    turnServo(STRAIGHT);
}


/*
 * @brief Run instruction inst
 * @retval Distance moved in cm (linear). If execute turn, always return 0 even if SOSBack is called.
 */
float executeInstruction(Instruction* inst, CompleteError* cpltErr) {
    float retval;

    switch (inst->type) {
        case INST_TYPE_GOSTRAIGHT:
            // Move straight
            mtr_mov_cm((float)inst->val, (float)inst->val);
            // Calculate average position of both motors
            retval = ((float)(motorAPID->count + motorBPID->count) / 2) / CNT_PER_CM;
            break;

        case INST_TYPE_TURN:
            float turning_angle = (float)inst->val;

            // Determine turning direction based on angle
            if (turning_angle >= 0 && turning_angle <= 360) {
                if (turning_angle <= 180) {
                    // Turn left (forward)
                    carTurn(1, turning_angle);
                } else {
                    // Turn right (forward)
                    carTurn(1, turning_angle);
                }
            } else if (turning_angle < 0) {
                if (turning_angle > -180) {
                    // Turn left (backward)
                    carTurn(2, turning_angle);
                } else if (turning_angle >= -360 && turning_angle < -180) {
                    // Turn right (backward)
                    carTurn(2, turning_angle);
                }
            }
            break;

        default:
            return 0;
    }

    // Set complete error type if undefined
    if (cpltErr->type == CPLTERR_TYPE_UNDEFINED) {
        cpltErr->type = CPLTERR_TYPE_CPLT;
    }

    return retval;
}

